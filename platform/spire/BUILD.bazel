load("//bazel:package.bzl", "homeworld_deb", "pythonize")
load("//bazel:zip_file.bzl", "zip_file")

# TODO: have a stub test (checking whether spire -h >/dev/null exits successfully) during build

clustered = {
    "dns-addon.yaml": "//dnsmasq:kubernetes.yaml",
    "dns-monitor.yaml": "//dns-monitor:kubernetes.yaml",
    "flannel.yaml": "//flannel:kubernetes.yaml",
    "flannel-monitor.yaml": "//flannel-monitor:kubernetes.yaml",
    "user-grant.yaml": "//user-grant:kubernetes.yaml",
}

mappings = {
    "__main__/spire/src": "",
    "__main__/spire/resources": "resources",
    "__main__/GIT_VERSION": "resources/GIT_VERSION",
    "__main__/upload/keyring.gpg": "resources/homeworld-archive-keyring.gpg",
    "__main__/upload/BRANCH_NAME": "resources/APT_BRANCH",
    "__main__/upload/DOWNLOAD_URL": "resources/APT_URL",
}

mappings.update({
    "__main__/" + ref.lstrip("/").replace(":", "/"): "resources/clustered/" + name
    for name, ref in clustered.items()
})

zip_file(
    name = "spirezip",
    out = "spire.zip",
    srcs = [
        "//:GIT_VERSION",
        "//upload:BRANCH_NAME",
        "//upload:DOWNLOAD_URL",
        "//upload:keyring.gpg",
    ] + glob([
        "src/*.py",
        "resources/**/*",
    ]) + clustered.values(),
    mappings = mappings,
)

pythonize(
    name = "spire",
    zip = ":spirezip",
)

homeworld_deb(
    name = "package",
    bin = {
        ":spire": "/usr/bin/spire",
    },
    package = "homeworld-spire",
    depends = [
        "homeworld-keysystem",
        "homeworld-hyperkube",
        "homeworld-etcd",
        "homeworld-debian-iso",
        "libarchive-tools",
        "python3",
        "python3-yaml",
        "python3-requests",
        "pwgen",
        "xorriso",
        "syslinux-utils",
        "whois",
        "cpio",
    ],
    visibility = ["//visibility:public"],
)
