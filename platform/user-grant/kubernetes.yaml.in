---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-grant
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: user-grant
  namespace: kube-system
  labels:
    app: user-grant
spec:
  selector:
    app: user-grant
  ports:
  - name: https
    port: 443
    protocol: TCP
  type: NodePort
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-grant-cfg
  namespace: kube-system
data:
  upstream-ca.pem: "{{UPSTREAM_CERTIFICATE}}"
---
apiVersion: v1
kind: Secret
metadata:
  name: user-grant-secrets
  namespace: kube-system
type: Opaque
data:
  server.key: "{{SERVER_KEY_BASE64}}"
  server.pem: "{{SERVER_CERT_BASE64}}"
  issuer.key: "{{ISSUER_KEY_BASE64}}"
  issuer.pem: "{{ISSUER_CERT_BASE64}}"
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: user-grant
  namespace: kube-system
  labels:
    app: user-grant
spec:
  replicas: 1
  selector:
    app: user-grant
  template:
    metadata:
      labels:
        app: user-grant
    spec:
      serviceAccountName: user-grant
      containers:
      - name: user-grant
        image: homeworld.private/user-grant@{digest}
        command:
        - /usr/bin/user-grant
        - upstream-ca=/config/upstream-ca.pem
        - kube-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - server-key=/secret/server.key
        - server-cert=/secret/server.pem
        - issuer-key=/secret/issuer.key
        - issuer-cert=/secret/issuer.pem
        - "apiserver={{SOME_APISERVER}}"
        - "email-domain={{EMAIL_DOMAIN}}"
        ports:
        - containerPort: 443
          name: https
          protocol: TCP
        volumeMounts:
        - name: user-grant-cfg
          mountPath: /config/
        - name: user-grant-secrets
          mountPath: /secret/
      volumes:
      - name: user-grant-cfg
        configMap:
          name: user-grant-cfg
      - name: user-grant-secrets
        secret:
          secretName: user-grant-secrets
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: user-grant
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - create
  - apiGroups:
      - "rbac.authorization.k8s.io"
    resources:
      - rolebindings
    verbs:
      - create
  - apiGroups:
      - "rbac.authorization.k8s.io"
    resources:
      - "clusterroles"
    verbs:
      - "bind"
    resourceNames:
      - "admin"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: user-grant
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: user-grant
subjects:
- kind: ServiceAccount
  name: user-grant
  namespace: kube-system
