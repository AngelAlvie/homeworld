load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# TODO: audit all downloads, make sure they're all source code
# old version used for go1.9.3 support
http_archive(
    name = "io_bazel_rules_go",
    urls = ["https://github.com/bazelbuild/rules_go/releases/download/0.14.7/rules_go-0.14.7.tar.gz"],
    sha256 = "1a5b8d49a052127af0d444c8e9711a120dd50e373a8da88714fdda46e11f7a90",
)

http_archive(
    name = "bazel_gazelle",
    urls = ["https://github.com/bazelbuild/bazel-gazelle/releases/download/0.15.0/bazel-gazelle-0.15.0.tar.gz"],
    sha256 = "6e875ab4b6bf64a38c352887760f21203ab054676d9c1b274963907e0768740d",
)

load("@io_bazel_rules_go//go:def.bzl", "go_rules_dependencies", "go_register_toolchains")

go_rules_dependencies()

# TODO: stop using binaries built by upstream; use our own
go_register_toolchains(
    # TODO: bump this to 1.10+, so that we can stop using an old version of rules_go!
    go_version = "1.9.3",
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")
load("//bazel:gorepo_patchfix.bzl", "go_repository_alt")

gazelle_dependencies()

http_archive(
    name = "io_kubernetes_build",
    sha256 = "9d4948cb1d6e70c7eab21e06186aa32ce9063a70b2b2092ae9346f3302ce7ff9",
    strip_prefix = "repo-infra-9759aa30612237743df7bece2462d8d98630d49b",
    urls = ["https://github.com/kubernetes/repo-infra/archive/9759aa30612237743df7bece2462d8d98630d49b.tar.gz"],
)

# TODO: update to a newer kubernetes
http_archive(
    name = "kubernetes",
    sha256 = "9f128809cdd442d71a13f7c61c7a0e03e832cf0c068a86184c1bcc9acdb78872",
    type = "tar.gz",
    urls = ["https://dl.k8s.io/v1.9.2/kubernetes-src.tar.gz"],
    patches = [
        "//kubernetes:0101-bump-openapi.patch",
        "//kubernetes:0102-gazelle-prefix.patch",
        "//kubernetes:0103-gazelle-proto-disable.patch",
        "//kubernetes:0104-staging-prefix.patch",
        "//kubernetes:0105-vendor-importmap.patch",
        "//kubernetes:0106-reformat-generators.patch",
        "//kubernetes:0107-go-genrule-bump.patch",
        "//kubernetes:0108-no-prefix.patch",
        "//kubernetes:0109-staging-importmap.patch",
        "//kubernetes:0110-rerun-gazelle.patch",
        "//kubernetes:0200-aci-launch.patch",
    ],
    patch_args = ["-p1"],
)

# dnsmasq

http_archive(
    name = "dnsmasq",
    urls = ["http://www.thekelleys.org.uk/dnsmasq/dnsmasq-2.78.tar.xz"],
    sha256 = "89949f438c74b0c7543f06689c319484bd126cc4b1f8c745c742ab397681252b",
    build_file = "//dnsmasq:BUILD.import",
)

# etcd

go_repository_alt(
    name = "com_github_coreos_etcd",
    commit = "f1d7dd87da3e8feab4aaf675b8e29c6a5ed5f58b",
    importpath = "github.com/coreos/etcd",
    build_external = "vendored",
    build_file_proto_mode = "disable_global",
    prepatch_cmds = ["mv -Tn cmd/vendor vendor"],  # to get etcd's vendoring strategy to be compatible with gazelle
    postpatches = ["//etcd:etcd-visibility.patch", "//etcd:etcdctl-visibility.patch"],
)

# flannel

go_repository(
    name = "com_github_coreos_flannel",
    commit = "2fd6898a7c9a11a12e63b56ca01143a260ee0aad", # 0.10.0
    importpath = "github.com/coreos/flannel",
    patches = ["//flannel:flannel.patch"],
    patch_args = ["-p1"],
)

# keysystem dependencies

go_repository(
    name = "org_golang_x_crypto",
    commit = "eb0de9b17e854e9b1ccd9963efafc79862359959",
    importpath = "golang.org/x/crypto",
)

go_repository(
    name = "in_gopkg_yaml_v2",
    commit = "eb3733d160e74a9c7e442f435eb3bea458e1d19f",
    importpath = "gopkg.in/yaml.v2",
)

# prometheus client, for packages like aci-pull-monitor

go_repository(
    name = "com_github_prometheus_client_golang",
    commit = "967789050ba94deca04a5e84cce8ad472ce313c1",
    importpath = "github.com/prometheus/client_golang",
)

go_repository(
    name = "com_github_prometheus_common",
    commit = "b36ad289a3eaecdc52470a19591146a2c0ffb532",
    importpath = "github.com/prometheus/common",
)

go_repository(
    name = "com_github_prometheus_procfs",
    commit = "abf152e5f3e97f2fafac028d2cc06c1feb87ffa5",
    importpath = "github.com/prometheus/procfs",
)

go_repository(
    name = "com_github_prometheus_client_model",
    commit = "5c3871d89910bfb32f5fcab2aa4b9ec68e65a99f",
    importpath = "github.com/prometheus/client_model",
)

go_repository(
    name = "com_github_matttproud_golang_protobuf_extensions",
    commit = "fc2b8d3a73c4867e51861bbdd5ae3c1f0869dd6a",
    importpath = "github.com/matttproud/golang_protobuf_extensions",
)

go_repository(
    name = "com_github_beorn7_perks",
    commit = "3ac7bf7a47d159a033b107610db8a1b6575507a4",
    importpath = "github.com/beorn7/perks",
)

# kubernetes-dns

go_repository_alt(
    name = "com_github_kubernetes_dns",
    commit = "d01e5e58d114fcddff98e4f6bf8b2b1484d06c3e", # 1.14.8
    importpath = "k8s.io/dns",
    build_external = "vendored",
    prepatch_cmds = ["find vendor/k8s.io/kubernetes -name BUILD -delete"],
    postpatches = ["//kube-dns:dns-visibility.patch"],
)

# kube-state-metrics

go_repository_alt(
    name = "com_github_kubernetes_kube_state_metrics",
    commit = "5ccda14bbff25a1007e13dfc3a75e5bb998abe6d",           # v1.2.0
    importpath = "k8s.io/kube-state-metrics",
    prepatch_cmds = ["find vendor/k8s.io -name BUILD -delete"],    # because the vendored kubernetes comes with BUILD files that will break the generated BUILDs:
    postpatches = ["//kube-state-metrics:state-visibility.patch"], # so that we can compile our own kube-state-metrics binary with our own options:
)
